{"version":3,"sources":["components/play-game/main.js","components/header/header.js","components/play-game/play-field/play-field.js","components/play-game/leaders/leaders.js","components/play-game/form/form.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["gameFlow","Header","className","PlayField","props","allCellsArr","Array","from","length","field","map","elem","i","key","k","Leaders","leaders","id","winner","date","Form","onSubmit","drawField","name","defaultValue","value","disabled","hidden","type","placeholder","autoComplete","required","gameMode_path","Game","state","delay","e","a","async","preventDefault","clearInterval","document","querySelector","setState","classList","add","gameMode","target","elements","gamerName","fetch","api_call","json","data","easyMode","normalMode","hardMode","startGame","then","response","reverse","slice","updateData","catch","error","this","message","allElemTotal","querySelectorAll","serverCall","sendData","bind","setInterval","allElem","randomElem","Math","floor","random","remove","addEventListener","contains","playerPoints","machinePoints","innerHTML","setTimeout","nameServer","fullDate","Date","toLocaleString","day","month","year","time","split","method","headers","body","JSON","stringify","Component","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79a08360.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PlayField from './play-field/play-field';\r\nimport Leaders from './leaders/leaders';\r\nimport Form from './form/form';\r\n\r\nconst gameMode_path = 'https://starnavi-frontend-test-task.herokuapp.com/game-settings'\r\nlet gameFlow;\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    field: null,\r\n    delay: null,\r\n    name: '',\r\n    leaders: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    const serverURL = 'https://starnavi-frontend-test-task.herokuapp.com/winners';\r\n\r\n    fetch(serverURL)\r\n      .then(response => response.json())\r\n      .then(leaders => leaders.reverse().slice(0, 5))\r\n      .then(leaders => this.updateData(leaders))\r\n      .catch(error => error);\r\n  }\r\n\r\n  updateData(leaders) {\r\n    this.setState({ leaders });\r\n  }\r\n\r\n  drawField = async (e) => {\r\n    e.preventDefault();\r\n    clearInterval(gameFlow);\r\n\r\n    const fieldTable = document.querySelector('.field-table');\r\n    if (fieldTable) {\r\n      this.setState({\r\n        field: null\r\n      });\r\n    }\r\n\r\n    const message = document.querySelector('.message');\r\n    message.classList.add('hidden');\r\n\r\n    const gameMode = e.target.elements.gameMode.value;\r\n    const gamerName = e.target.elements.name.value;\r\n\r\n    const api_call = await fetch(gameMode_path);\r\n    const data = await api_call.json();\r\n\r\n    if (gameMode === 'Easy') {\r\n      this.setState({\r\n        field: data.easyMode.field,\r\n        delay: data.easyMode.delay,\r\n        name: gamerName\r\n      });\r\n    }\r\n\r\n    if (gameMode === 'Normal') {\r\n      this.setState({\r\n        field: data.normalMode.field,\r\n        delay: data.normalMode.delay,\r\n        name: gamerName\r\n      });\r\n    }\r\n\r\n    if (gameMode === 'Hard') {\r\n      this.setState({\r\n        field: data.hardMode.field,\r\n        delay: data.hardMode.delay,\r\n        name: gamerName\r\n      });\r\n    }\r\n\r\n    const { field, name } = this.state;\r\n\r\n    if (field && name) {\r\n      this.startGame();\r\n    }\r\n  }\r\n\r\n  startGame() {\r\n    const message = document.querySelector('.message');\r\n    const { delay, name } = this.state;\r\n    const allElemTotal = document.querySelectorAll('.field-cell');\r\n\r\n    const serverCall = this.sendData.bind(this);\r\n\r\n    gameFlow = setInterval(() => {\r\n      const allElem = document.querySelectorAll('.field-cell-select');\r\n      const length = allElem.length;\r\n\r\n      const random = Math.floor(Math.random() * length);\r\n      let randomElem = allElem[random];\r\n\r\n      if (randomElem) {\r\n      randomElem.classList.add('blue');\r\n      randomElem.classList.remove('field-cell-select');\r\n\r\n      randomElem.addEventListener('click', function (e) {\r\n        if (e.target.classList.contains('blue')) {\r\n          e.target.classList.add('player-win');\r\n          e.target.classList.remove('blue');\r\n        }\r\n      });\r\n      }\r\n\r\n      const playerPoints = document.querySelectorAll('.player-win');\r\n      const machinePoints = document.querySelectorAll('.machine-win');\r\n\r\n      if (!randomElem && (playerPoints.length > machinePoints.length)) {\r\n        message.innerHTML = `${name} won`;\r\n        message.classList.remove('hidden');\r\n        clearInterval(gameFlow);\r\n        serverCall(name);\r\n      }\r\n\r\n      if (!randomElem && (playerPoints.length < machinePoints.length)) {\r\n        message.innerHTML = 'Computer won';\r\n        message.classList.remove('hidden');\r\n        clearInterval(gameFlow);\r\n        serverCall('Computer');\r\n      }\r\n\r\n      setTimeout(() => {\r\n        if (randomElem && randomElem.classList.contains('blue')) {\r\n          randomElem.classList.add('machine-win');\r\n          randomElem.classList.remove('blue');\r\n        }\r\n      }, delay);\r\n\r\n      if (randomElem && ((playerPoints.length * 2) > allElemTotal.length)) {\r\n        message.innerHTML = `${name} won`;\r\n        message.classList.remove('hidden');\r\n        randomElem.classList.remove('blue', 'player-win', 'machine-win');\r\n        clearInterval(gameFlow);\r\n        serverCall(name);\r\n      }\r\n\r\n      if (randomElem && (((machinePoints.length + 1) * 2) > allElemTotal.length)) {\r\n        message.innerHTML = 'Computer won';\r\n        message.classList.remove('hidden');\r\n        clearInterval(gameFlow);\r\n        randomElem.classList.remove('blue', 'machine-win');\r\n        serverCall('Computer');\r\n      }\r\n    }, delay)\r\n  }\r\n\r\n  sendData(nameServer) {\r\n    const serverURL = 'https://starnavi-frontend-test-task.herokuapp.com/winners';\r\n\r\n    const fullDate = new Date();\r\n    const date = fullDate.toLocaleString('en', { day: 'numeric', month: 'long', year: 'numeric' });\r\n\r\n    const time = fullDate.toLocaleString().split(',')[1].slice(0, -3);\r\n\r\n    fetch(serverURL, {\r\n      method: 'post',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ id: Math.random(), winner: nameServer, date: `${time}; ${date}` })\r\n    })\r\n      .then(response => response.json())\r\n      .then(leaders => leaders.reverse().slice(0, 5))\r\n      .then(leaders => this.updateData(leaders))\r\n      .catch(error => error);;\r\n\r\n    const playButton = document.querySelector('.play-button');\r\n    playButton.innerHTML = 'PLAY AGAIN';\r\n\r\n    this.setState({\r\n      delay: null,\r\n      name: ''\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"game-wrapper\">\r\n        <div className=\"play-wrapper\">\r\n          <Form drawField={this.drawField} />\r\n          <PlayField {...this.state} />\r\n        </div>\r\n        {this.state.leaders && <Leaders {...this.state} />}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game","import React from 'react';\r\nimport './header.scss'\r\n\r\nconst Header = () => (\r\n    <header className='header'>\r\n        <h1>Game in Dots</h1>\r\n    </header>\r\n    \r\n);\r\n\r\nexport default Header","import React, { Fragment } from 'react';\r\nimport './play-field.scss'\r\n\r\nconst PlayField = props => {\r\n    const allCellsArr = Array.from({ length: props.field });\r\n\r\n    return (\r\n        <Fragment>\r\n            <p className=\"message hidden\">!</p>\r\n            <div className=\"field-wrapper\">\r\n                {props.field && <table className=\"field-table\">\r\n                    <tbody>\r\n                        {allCellsArr.map((elem, i) => {\r\n                            return (\r\n                                <tr key={`${i}tr`}>\r\n                                    {allCellsArr.map((elem, k) => {\r\n                                        return (\r\n                                            <td key={`${k}td${i}`} className='field-cell field-cell-select'>\r\n                                            </td>\r\n                                        )\r\n                                    })}\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                }\r\n                {!props.field && <table className=\"field-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default PlayField","import React from 'react';\r\nimport './leaders.scss'\r\n\r\nconst Leaders = props => {\r\n    const { leaders } = props;\r\n\r\n    return (\r\n        <div className=\"leaders-wrapper\">\r\n            <p>Leaders Board</p>\r\n\r\n            <table className=\"leaders-table-wrapper\">\r\n                <tbody>\r\n                    <tr className='leader-row-head'>\r\n                        <th>Name</th>\r\n                        <th>Date</th>\r\n                    </tr>\r\n                    {leaders.map(({ id, winner, date }) => {\r\n                        return (\r\n                            <tr key={id} className='leader-row'>\r\n                                <td className='leader-name'>{winner}</td>\r\n                                <td className='leader-date'>{date}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Leaders","import React from 'react';\r\nimport './form.scss'\r\n\r\nconst Form = props => (\r\n    <div>\r\n        <form onSubmit={props.drawField} className=\"settings-wrapper\">\r\n            <select name=\"gameMode\" defaultValue={'DEFAULT'}>\r\n                <option value=\"DEFAULT\" disabled hidden className=\"select-mode\">Pick game mode</option>\r\n                <option value=\"Easy\">Easy</option>\r\n                <option value=\"Normal\">Normal</option>\r\n                <option value=\"Hard\">Hard</option>\r\n            </select>\r\n            <input type=\"text\" name=\"name\" placeholder=\"Enter your name\" autoComplete=\"off\" required></input>\r\n            <button className=\"play-button\">PLAY</button>\r\n        </form>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Form","import React from 'react';\r\nimport Game from '../components/play-game/main';\r\n\r\nconst Home = () => (\r\n    <Game />\r\n)\r\n\r\nexport default Home","import React, { Fragment } from 'react';\nimport './styles/reset.scss';\nimport './App.scss';\n\nimport Header from './components/header/header';\n// import Game from './pages/main';\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header />\n      <Home />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}